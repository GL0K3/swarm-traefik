
version: "3.8"
services:
  traefik:
    # Use the latest Traefik image
    image: traefik:latest
    ports:
      - "80:80"
      - "443:443"
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the manager node,
          # as the node with it has the volume for the certificates
          - node.role == manager
          #- node.labels.traefik-public.traefik-public-certificates == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        # Middlewares can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

        - traefik.http.middlewares.admin-auth.basicauth.users=admin:$$apr1$$4qz0p7uh$$ZPWxZYloN4ommOyevP.MT.
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${DOMAIN}`)
        - traefik.http.routers.traefik-dashboard-http.entrypoints=http
        - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
        - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${DOMAIN}`)
        - traefik.http.routers.traefik-dashboard-https.entrypoints=https
        - traefik.http.routers.traefik-dashboard-https.tls=false
        #- traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
        - traefik.http.routers.traefik-dashboard-https.service=api@internal
        - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth
        - traefik.http.services.traefik-dashboard-https.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --log.level=DEBUG
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      # Enable Docker Swarm mode
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.network=traefik-public
      - --providers.docker.exposedbydefault=false
      #- --certificatesresolvers.le.acme.tlschallenge=true
      #- --certificatesresolvers.le.acme.tlschallenge.entrypoint=http
      #- --certificatesresolvers.le.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      #- --certificatesresolvers.le.acme.email=
      # Store the Let's Encrypt certificates in the mounted volume
      #- --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Allow to communicate with backend containers running https. https://stackoverflow.com/questions/49412376/internal-server-error-with-traefik-https-backend-on-port-443
      - --serverstransport.insecureskipverify=true
    networks:
      - traefik-public

volumes:
  traefik-public-certificates:
    driver: local

networks:
  traefik-public:
    external: true





